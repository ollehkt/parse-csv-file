{
  "version": 3,
  "sources": ["../../src/lib/readCSV.ts", "../../src/lib/parseCSV.ts"],
  "sourcesContent": ["import * as fs from 'fs'\n\n/**\n * CSV \uD30C\uC77C\uC744 \uC77D\uC5B4\uC624\uB294 \uD568\uC218\n * @param path - CSV \uD30C\uC77C\uC758 \uACBD\uB85C\n * @returns CSV \uD30C\uC77C\uC758 \uB0B4\uC6A9\n */\n\nconst readCSV = (path: string) => {\n  const data = fs.readFileSync(path, 'utf8')\n  return data\n}\n\nexport default readCSV\n", "/**\n * \uBC94\uC6A9\uC801\uC778 CSV \uB370\uC774\uD130\uB97C \uD30C\uC2F1\uD558\uC5EC JSON \uAC1D\uCCB4 \uBC30\uC5F4\uB85C \uBCC0\uD658\uD558\uB294 \uD568\uC218\n * @param {string} csvString - CSV \uD615\uC2DD\uC758 \uBB38\uC790\uC5F4\n * @returns {Array} - \uD30C\uC2F1\uB41C \uAC1D\uCCB4 \uBC30\uC5F4\n */\nconst parseCSV = (csvString: string) => {\n  // \uC904 \uB2E8\uC704\uB85C \uBD84\uB9AC\n  const lines = csvString.trim().split('\\n')\n\n  // \uCCAB \uBC88\uC9F8 \uC904\uC740 \uD5E4\uB354\uB85C \uC0AC\uC6A9\n  const headers = parseCSVLine(lines[0])\n\n  // \uACB0\uACFC\uB97C \uC800\uC7A5\uD560 \uBC30\uC5F4\n  const result = []\n\n  // \uAC01 \uC904\uC744 \uCC98\uB9AC\n  for (let i = 1; i < lines.length; i++) {\n    if (lines[i].trim() === '') continue // \uBE48 \uC904 \uAC74\uB108\uB6F0\uAE30\n\n    const values = parseCSVLine(lines[i])\n    const obj: Record<string, any> = {}\n\n    // \uD5E4\uB354\uC640 \uAC12\uC744 \uB9E4\uCE6D\uD558\uC5EC \uAC1D\uCCB4 \uC0DD\uC131\n    headers.forEach((header, index) => {\n      // \uAC12\uC758 \uD0C0\uC785\uC744 \uC790\uB3D9\uC73C\uB85C \uAC10\uC9C0\uD558\uC5EC \uBCC0\uD658\n      obj[header] = autoDetectType(values[index])\n    })\n\n    result.push(obj)\n  }\n\n  return result\n}\n\n/**\n * CSV \uD55C \uC904\uC744 \uD30C\uC2F1\uD558\uB294 \uD5EC\uD37C \uD568\uC218 (\uB530\uC634\uD45C\uB85C \uBB36\uC778 \uCF64\uB9C8 \uCC98\uB9AC)\n * @param {string} line - CSV \uD615\uC2DD\uC758 \uD55C \uC904\n * @returns {Array} - \uD30C\uC2F1\uB41C \uAC12 \uBC30\uC5F4\n */\nconst parseCSVLine = (line: string) => {\n  const result = []\n  let current = ''\n  let inQuotes = false\n\n  for (let i = 0; i < line.length; i++) {\n    const char = line[i]\n\n    if (char === '\"') {\n      // \uB530\uC634\uD45C \uC548\uC5D0 \uC788\uB294 \uB530\uC634\uD45C\uC778 \uACBD\uC6B0 (\uC774\uC2A4\uCF00\uC774\uD504\uB41C \uB530\uC634\uD45C)\n      if (i + 1 < line.length && line[i + 1] === '\"') {\n        current += '\"'\n        i++ // \uB2E4\uC74C \uB530\uC634\uD45C \uAC74\uB108\uB6F0\uAE30\n      } else {\n        // \uB530\uC634\uD45C \uC0C1\uD0DC \uC804\uD658\n        inQuotes = !inQuotes\n      }\n    } else if (char === ',' && !inQuotes) {\n      // \uCF64\uB9C8\uB97C \uB9CC\uB098\uBA74 \uD604\uC7AC \uAC12\uC744 \uBC30\uC5F4\uC5D0 \uCD94\uAC00\uD558\uACE0 \uCD08\uAE30\uD654\n      result.push(current)\n      current = ''\n    } else {\n      // \uC77C\uBC18 \uBB38\uC790\uB294 \uD604\uC7AC \uAC12\uC5D0 \uCD94\uAC00\n      current += char\n    }\n  }\n\n  // \uB9C8\uC9C0\uB9C9 \uAC12 \uCD94\uAC00\n  result.push(current)\n\n  return result\n}\n\n/**\n * \uAC12\uC758 \uD0C0\uC785\uC744 \uC790\uB3D9\uC73C\uB85C \uAC10\uC9C0\uD558\uC5EC \uC801\uC808\uD55C \uD0C0\uC785\uC73C\uB85C \uBCC0\uD658\n * @param {string} value - \uBCC0\uD658\uD560 \uAC12\n * @returns {any} - \uBCC0\uD658\uB41C \uAC12\n */\nconst autoDetectType = (value: string) => {\n  if (value === undefined || value === null || value === '') {\n    return null\n  }\n\n  // \uCF64\uB9C8 \uC81C\uAC70 (\uC22B\uC790 \uD615\uC2DD)\n  const valueWithoutCommas = value.replace(/,/g, '')\n\n  // \uC815\uC218 \uB610\uB294 \uC2E4\uC218 \uCCB4\uD06C\n  if (/^-?\\d+$/.test(valueWithoutCommas)) {\n    // \uC815\uC218\n    return parseInt(valueWithoutCommas, 10)\n  } else if (/^-?\\d+\\.\\d+$/.test(valueWithoutCommas)) {\n    // \uC2E4\uC218\n    return parseFloat(valueWithoutCommas)\n  } else if (valueWithoutCommas.toLowerCase() === 'true') {\n    return true\n  } else if (valueWithoutCommas.toLowerCase() === 'false') {\n    return false\n  } else if (valueWithoutCommas.toLowerCase() === 'null') {\n    return null\n  }\n\n  // JSON \uAC1D\uCCB4\uB85C \uD30C\uC2F1 \uC2DC\uB3C4\n  try {\n    // \uC791\uC740\uB530\uC634\uD45C\uB97C \uD070\uB530\uC634\uD45C\uB85C \uB300\uCCB4 (JSON \uD638\uD658\uC131)\n    const jsonCompatible = value.replace(/'/g, '\"')\n    // \uAC1D\uCCB4\uB098 \uBC30\uC5F4 \uD615\uC2DD\uC778\uC9C0 \uD655\uC778\n    if (\n      (jsonCompatible.startsWith('{') && jsonCompatible.endsWith('}')) ||\n      (jsonCompatible.startsWith('[') && jsonCompatible.endsWith(']'))\n    ) {\n      const parsed = JSON.parse(jsonCompatible)\n      return parsed\n    }\n  } catch (e) {\n    // JSON \uD30C\uC2F1 \uC2E4\uD328 \uC2DC \uC6D0\uB798 \uBB38\uC790\uC5F4 \uBC18\uD658\n  }\n\n  return value\n}\n\nexport default parseCSV\n"],
  "mappings": ";AAAA,YAAY,QAAQ;AAQpB,IAAM,UAAU,CAAC,SAAiB;AAChC,QAAM,OAAU,gBAAa,MAAM,MAAM;AACzC,SAAO;AACT;AAEA,IAAO,kBAAQ;;;ACRf,IAAM,WAAW,CAAC,cAAsB;AAEtC,QAAM,QAAQ,UAAU,KAAK,EAAE,MAAM,IAAI;AAGzC,QAAM,UAAU,aAAa,MAAM,CAAC,CAAC;AAGrC,QAAM,SAAS,CAAC;AAGhB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,QAAI,MAAM,CAAC,EAAE,KAAK,MAAM,GAAI;AAE5B,UAAM,SAAS,aAAa,MAAM,CAAC,CAAC;AACpC,UAAM,MAA2B,CAAC;AAGlC,YAAQ,QAAQ,CAAC,QAAQ,UAAU;AAEjC,UAAI,MAAM,IAAI,eAAe,OAAO,KAAK,CAAC;AAAA,IAC5C,CAAC;AAED,WAAO,KAAK,GAAG;AAAA,EACjB;AAEA,SAAO;AACT;AAOA,IAAM,eAAe,CAAC,SAAiB;AACrC,QAAM,SAAS,CAAC;AAChB,MAAI,UAAU;AACd,MAAI,WAAW;AAEf,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,UAAM,OAAO,KAAK,CAAC;AAEnB,QAAI,SAAS,KAAK;AAEhB,UAAI,IAAI,IAAI,KAAK,UAAU,KAAK,IAAI,CAAC,MAAM,KAAK;AAC9C,mBAAW;AACX;AAAA,MACF,OAAO;AAEL,mBAAW,CAAC;AAAA,MACd;AAAA,IACF,WAAW,SAAS,OAAO,CAAC,UAAU;AAEpC,aAAO,KAAK,OAAO;AACnB,gBAAU;AAAA,IACZ,OAAO;AAEL,iBAAW;AAAA,IACb;AAAA,EACF;AAGA,SAAO,KAAK,OAAO;AAEnB,SAAO;AACT;AAOA,IAAM,iBAAiB,CAAC,UAAkB;AACxC,MAAI,UAAU,UAAa,UAAU,QAAQ,UAAU,IAAI;AACzD,WAAO;AAAA,EACT;AAGA,QAAM,qBAAqB,MAAM,QAAQ,MAAM,EAAE;AAGjD,MAAI,UAAU,KAAK,kBAAkB,GAAG;AAEtC,WAAO,SAAS,oBAAoB,EAAE;AAAA,EACxC,WAAW,eAAe,KAAK,kBAAkB,GAAG;AAElD,WAAO,WAAW,kBAAkB;AAAA,EACtC,WAAW,mBAAmB,YAAY,MAAM,QAAQ;AACtD,WAAO;AAAA,EACT,WAAW,mBAAmB,YAAY,MAAM,SAAS;AACvD,WAAO;AAAA,EACT,WAAW,mBAAmB,YAAY,MAAM,QAAQ;AACtD,WAAO;AAAA,EACT;AAGA,MAAI;AAEF,UAAM,iBAAiB,MAAM,QAAQ,MAAM,GAAG;AAE9C,QACG,eAAe,WAAW,GAAG,KAAK,eAAe,SAAS,GAAG,KAC7D,eAAe,WAAW,GAAG,KAAK,eAAe,SAAS,GAAG,GAC9D;AACA,YAAM,SAAS,KAAK,MAAM,cAAc;AACxC,aAAO;AAAA,IACT;AAAA,EACF,SAAS,GAAG;AAAA,EAEZ;AAEA,SAAO;AACT;AAEA,IAAO,mBAAQ;",
  "names": []
}
